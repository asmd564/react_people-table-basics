{"version":3,"sources":["components/ui/link/NavLink.tsx","components/Navbar/Navbar.tsx","components/Loader/Loader.tsx","api.ts","components/PersonPage/PersonPage.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Navlink","to","text","className","isActive","cn","Navbar","role","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonPage","memo","person","selectedPerson","name","sex","born","died","motherName","fatherName","mother","father","slug","PeopleTable","people","selectedSlug","error","length","map","PeoplePage","useParams","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeopleLoad","loadedPeople","HomePage","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.884a725d.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const Navlink: React.FC<Props> = ({ to, text }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => cn('navbar-item', {\n        'has-background-grey-lighter': isActive,\n      })}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import { Navlink } from '../ui/link/NavLink';\n\nexport const Navbar: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <Navlink to=\"/\" text=\"Home\" />\n          <Navlink to=\"/people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person;\n  selectedPerson: string;\n}\nexport const PersonPage: FC<Props> = memo(({ person, selectedPerson }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({ 'has-background-warning': slug === selectedPerson })}\n    >\n      <td>\n        <Link\n          to={slug}\n          className={cn({ 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      {mother ? (\n        <td>\n          <Link\n            className=\"has-text-danger\"\n            to={mother.slug}\n          >\n            {motherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{motherName || '-'}</td>\n      )}\n\n      {father ? (\n        <td>\n          <Link to={father.slug}>\n            {fatherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{fatherName || '-'}</td>\n      )}\n    </tr>\n  );\n});\n","import React from 'react';\nimport { Person } from '../../types';\nimport { PersonPage } from '../PersonPage/PersonPage';\n\ntype Props = {\n  people: Person[],\n  selectedSlug: string,\n  error: boolean,\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  selectedSlug,\n  error,\n}) => {\n  if (error) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (!people.length) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonPage\n            key={person.name}\n            person={person}\n            selectedPerson={selectedSlug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { Person } from '../../types';\n\nexport const PeoplePage: React.FC = () => {\n  const { slug = '' } = useParams();\n\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const getPeopleLoad = async () => {\n      try {\n        const loadedPeople = await getPeople();\n\n        setPeople(loadedPeople);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getPeopleLoad();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <PeopleTable\n              people={people}\n              selectedSlug={slug}\n              error={isError}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}